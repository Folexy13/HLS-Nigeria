import re
import os
from fuzzywuzzy import fuzz, process
from django.utils import timezone
import json
from decimal import Decimal
from NT_gallery.models import Product
from NT_gallery.models import LSV
from NT_gallery.models import DosageForm
from NT_gallery.models import Flag_condition
from datetime import datetime
fixtures = 'NT_gallery/fixtures'


age_categories = {
    'infant': {'male': ['Cryptorchidism', 'Hypospadias'], 
                'female': ['Congenital heart defects', 'Respiratory distress syndrome']},
    'child': {'male': ['ADHD', 'Autism'], 
               'female': ['Juvenile idiopathic arthritis', 'Pediatric asthma']},
    'teen': {'male': ['Acne', 'Sports-related injuries'], 
              'female': ['Menstrual disorders', 'Eating disorders']},
    'young_adult': {'male': ['Hypertension', 'Testicular cancer'], 
                       'female': ['Polycystic ovary syndrome', 'Endometriosis']},
    'adult': {'male': ['Prostate cancer', 'Cardiovascular disease'], 
               'female': ['Breast cancer', 'Osteoporosis']},
    'menopausal': {'female': ['Hot flashes', 'Vaginal dryness']},
    'aged': {'male': ['Prostate enlargement', 'Age-related macular degeneration'], 
              'female': ['Dementia', 'Urinary incontinence']},
    'male (50-60)': {'male': ['Benign prostatic hyperplasia', 'Age-related erectile dysfunction',
                               'Prostate fibrosis', 'Testicular atrophy']}
}


# Load products JSON data
with open('NT_gallery/fixtures/data.json') as f:
    products_data = json.load(f)

def clean_price(price):
    # Check if the price is a string
    if isinstance(price, str):
        # Remove the Naira sign
        price = price.replace('â‚¦', '').replace('₦', '')
        
        # Remove any commas
        price = price.replace(',', '')
        
        # Check if the price is empty
        if price.strip() == '':
            return None
        
        # Check if the price is a range
        if '-' in price:
            # Split the price range into min and max prices
            prices = price.split('-')
            min_price = Decimal(prices[0].strip())
            max_price = Decimal(prices[1].strip())
            
            # Calculate the average price
            avg_price = (min_price + max_price) / 2
            return avg_price
        else:
            # Return the price as a Decimal
            return Decimal(price)
    else:
        # Return the price as is (already a Decimal)
        return price

for product in products_data:
    print(f"{product['name']}-{clean_price(product['price'])}")     


dbproducts = Product.objects.all()
for dbproduct in dbproducts:
    print(f"{dbproduct.name}-{clean_price(dbproduct.price)}")


for dbproduct in dbproducts:
    print(f"{dbproduct.name}-{dbproduct.id}")

for product in products_data:
    dbproduct = Product.objects.filter(name=product['name']).first()
    if dbproduct:
        cleaned_price = clean_price(product['price'])
        if cleaned_price is not None:
            dbproduct.price = cleaned_price
            dbproduct.save()
            print(f"Updated price for {dbproduct.name} to {dbproduct.price}")
        else:
            print(f"No price found for {product['name']}")
    else:
        print(f"Product '{product['name']}' not found in the database.")


# Loop through each product
for product in products_data:
    age = 'adult'  
    gender = product['sub_categories']['gender']
    flag_condition_objs = []
    if 'male' in gender:
        flag_condition_objs.extend(age_categories[age]['male'])
    if 'female' in gender:
        flag_condition_objs.extend(age_categories[age]['female'])
    if 'pictures' in product and 'main_image' in product['pictures']:
        old_path = product['pictures']['main_image']
        new_path = old_path.replace('/blog_images/', 'product_image/')
        product['pictures']['main_image'] = new_path
    product['sub_categories']['age'] = [age]
    price_str = product['price']
    product['price'] = clean_price(price_str)
    lsv_objs = []
    for lsv in product['lsvs']:
        lsv_obj, created = LSV.objects.get_or_create(name=lsv['name'])
        lsv_objs.append(lsv_obj)
    product_obj, created = Product.objects.get_or_create(
        name=product['name'],
        category=product['category'],
        sub_categories=product['sub_categories'],
        price=product['price'],
        strength=product['strength'],
        description=product['description'],
        pictures=product['pictures']
    )
    flag_condition_instances = []
    for condition in flag_condition_objs:
        flag_condition_instance, created = Flag_condition.objects.get_or_create(name=condition)
        flag_condition_instances.append(flag_condition_instance)
    product_obj.flag_condition.set(flag_condition_instances)
    product_obj.lsvs.set(lsv_objs)
    product_obj.save()


    ----------------------------------------------------------------------------------------
    for lifestyle

with open('NT_gallery/fixtures/lifestyledata.json', 'w') as f:
    json.dump(data, f, indent=4)


    def load_products_from_json(file_path):
    with open('NT_gallery/fixtures/lifestyledata.json') as f:
        data = json.load(f)

    for product_data in data:
        sub_categories = {
            'age': product_data['sub_categories']['age'],
            'brands': product_data['sub_categories']['brands'],
            'gender': product_data['sub_categories']['gender'],
            'Lifestyle': product_data['sub_categories']['Lifestyle'],
            'Dosage Forms': product_data['sub_categories']['Dosage Forms'],
            'Lifestyle Rating': product_data['sub_categories']['Lifestyle Rating'],
            'pharmacy grouping': product_data['sub_categories']['pharmacy grouping'],
        }

        product, created = Product.objects.get_or_create(
            name=product_data['name'],
            defaults={
                'category': product_data['main_category'],
                'sub_categories': sub_categories,
                'description': product_data['description'],
                'pictures': product_data['pictures'],
            }
        )

        if created:
            print(f"Product '{product.name}' created successfully.")
        else:
            print(f"Product '{product.name}' already exists.")

        if not created:
            product.category = product_data['main_category']
            product.sub_categories = sub_categories
            product.description = product_data['description']
            product.pictures = product_data['pictures']
            product.save()

# Usage
load_products_from_json('products.json')

for product in data:
    if product['sub_categories']['brands']==['N/F'] or product['sub_categories']['brands']==["Nature's Formula"]:
        print(product['sub_categories']['brands'])
        product['sub_categories']['brands'] = "Nature's Field"

for product in data:
    if product['name']=="Calcium":
        print(product['sub_categories']['brands'])

# Delete existing products
Product.objects.all().delete()

# Load JSON data
with open('NT_gallery/fixtures/healthcondition.json', 'r') as f:
    data = json.load(f)

# Create products
for product_data in data:
    price = product_data.get('price')
    if price is not None and price != '':
        try:
            price = Decimal(float(price))
        except (ValueError, decimal.InvalidOperation):
            price = None
    else:
        price = None
    product = Product(
        name=product_data['name'],
        category=product_data['category'],
        sub_categories=product_data['sub_categories'],
        price=price,
        strength=product_data['strength'],
        description=product_data['description'],
        main_image=product_data['main_image'],
    )
    product.save()
    
    # Add LSVs
    for lsv in product_data['lsvs']:
        # Assuming LSV is a model with a name field
        lsv_obj, _ = LSV.objects.get_or_create(name=lsv)
        product.lsvs.add(lsv_obj)
        
    # Add flag conditions
    for flag_condition in product_data['flag_condition']:
        # Assuming FlagCondition is a model with a name field
        flag_condition_obj, _ = Flag_condition.objects.get_or_create(name=flag_condition)
        product.flag_condition.add(flag_condition_obj)


import json

# Load JSON data
with open('your_file.json', 'r') as f:
    data = json.load(f)

# Loop over each product
for product in data:
    sub_categories = product['sub_categories']
    
    # Check if 'pharmacy_grouping' key exists
    if 'pharmacy_grouping' in sub_categories:
        # Add value to 'pharmacy grouping' list
        if 'pharmacy grouping' not in sub_categories:
            sub_categories['pharmacy grouping'] = []
        sub_categories['pharmacy grouping'].append(sub_categories['pharmacy_grouping'])
        
        # Delete 'pharmacy_grouping' key
        del sub_categories['pharmacy_grouping']

# Save updated JSON data
with open('your_file.json', 'w') as f:
    json.dump(data, f, indent=4)

------------------------------------------------------------------------------------------------
def print_products(json_file_name):
    with open(f'NT_gallery/fixtures/{json_file_name}') as f:
        data = json.load(f)
        for p in data:
            print(p['name'])
            #('------------------------------------------')
            #print("Unmatched Supplements:")
            #for supplement in unmatched_supplements:
                #print(supplement)
            print("\n")

print_products('respiratorycondition.json')




def load_products(json_file_name):
    try:
        with open(f'NT_gallery/fixtures/{json_file_name}condition.json', 'r') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error loading JSON: {e}")
        return
    added_products = []
    for product_data in data:
        price = product_data.get('price')
        if price is not None and price != '':
            try:
                price = Decimal(float(price))
            except (ValueError, Decimal.InvalidOperation):
                price = None
        else:
            price = None
        dosage_form_name = product_data.get('dosage_form')
        if dosage_form_name:
            dosage_form_obj, _ = DosageForm.objects.get_or_create(name=dosage_form_name)
        else:
            dosage_form_obj = None
        product = Product(
            name=product_data['name'],
            category=product_data['category'],
            sub_categories=product_data['sub_categories'],
            price=price,
            strength=product_data['strength'],
            description=product_data['description'],
            main_image=product_data['main_image'],
            dosage_form=dosage_form_obj,
        )
        try:
            product.save()
            added_products.append(product.name)
        except Exception as e:
            print(f"Error saving product: {e}")
            continue
        # Add LSVs
        for lsv in product_data['lsvs']:
            lsv_obj, _ = LSV.objects.get_or_create(name=lsv)
            product.lsvs.add(lsv_obj)
        # Add flag conditions
        for flag_condition in product_data['flag_condition']:
            flag_condition_obj, _ = Flag_condition.objects.get_or_create(name=flag_condition)
            product.flag_condition.add(flag_condition_obj)
    print("Added Products:")
    for product in added_products:
        print(product)
    print('-------------------------------------------------------------------')

# Usage
load_products(json_file_name)



file_names = [
    'respiratory',
    'reproductive',
    'nerve',
    'hormone',
    'eye',
    'digestive',
    'brain',
    'bones_joint',
    'blood'
]

for file_name in file_names:
    print(f"Loading products for {file_name}...")
    load_products(file_name)
    print(f"Done loading products for {file_name}.\n")


-----------------PRINT SUPPLEMENT WITH MULTIPLE APPEARANCES-----------------------------
supplements that appear in multiple JSON files
supplements_in_multiple_files = {}

# Loop through every JSON file in the fixtures directory
for filename in os.listdir('NT_gallery/fixtures'):
    if filename.endswith('.json'):
        # Open the JSON file and load its data
        with open(os.path.join('NT_gallery/fixtures', filename), 'r') as file:
            data = json.load(file)
        # Print the name of the JSON file as the header
        print(f"{filename[:-5]}:")
        for supplement in data:
            # Print the name of the supplement
            print(supplement['name'])
            # Check if the supplement appears in multiple JSON files
            if supplement['name'] in supplements_in_multiple_files:
                supplements_in_multiple_files[supplement['name']]['filenames'].append(filename)
            else:
                supplements_in_multiple_files[supplement['name']] = {
                    'description': supplement['description'],
                    'filenames': [filename]
                }
        print()  # Empty line for better readability

# Print supplements that appear in multiple JSON files
print("Supplements that appear in multiple JSON files:")
for supplement, info in supplements_in_multiple_files.items():
    if len(info['filenames']) > 1:
        print(f"{supplement}:")
        print(f"Description: {info['description']}")
        print(f"Appears in: {', '.join(info['filenames'])}")
        print()  # Empty line for better readability



-----------------PRINT ALL SUPPLEMENTS AND THEIR BRAND NAMES-------------------------------
unique_supplements = []
# Loop through every JSON file in the fixtures directory
for filename in os.listdir('NT_gallery/fixtures'):
    if filename.endswith('.json'):
        # Open the JSON file and load its data
        with open(os.path.join('NT_gallery/fixtures', filename), 'r') as file:
            data = json.load(file)
        # Add each supplement's name to the list
        for supplement in data:
            if supplement['name'] not in [s['name'] for s in unique_supplements]:
                unique_supplements.append(supplement)

for supplement in unique_supplements:
    print(f'{supplement['name']}----{supplement['sub_categories']['brands']}')


---------------------------PRINT ONLY SUPPLEMENTS WITHOUT BRAND NAMES-------------
unique_supplements = []
branded_supplements = []

# Loop through every JSON file in the fixtures directory
for filename in os.listdir('NT_gallery/fixtures'):
    if filename.endswith('.json'):
        # Open the JSON file and load its data
        with open(os.path.join('NT_gallery/fixtures', filename), 'r') as file:
            data = json.load(file)
        for supplement in data:
            if ('sub_categories' not in supplement or 'brands' not in supplement['sub_categories'] or not supplement['sub_categories']['brands']) and supplement['name'] not in [s['name'] for s in unique_supplements]:
                unique_supplements.append(supplement)
            else:
                branded_supplements.append(supplement)


for supplement in unique_supplements:
    print(f"{supplement['name']}----{supplement.get('sub_categories', {}).get('brands', 'No brand')}")

for supplement in branded_supplements:
    print(f"{supplement['name']}----{supplement.get('sub_categories', {}).get('brands', 'No brand')}")

fixtures = 'NT_gallery/fixtures'
for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        with open(os.path.join(fixtures, filename), 'r') as file:
            data = json.load(file)
        print(f"{filename[:-5]}:")
        for supplement in data:
            name = supplement.get('name')
            if name in supplement_brands:
                supplement['sub_categories']['brands'] = [supplement_brands[name]]
                print(f"Fixed brand for {name} to {supplement_brands[name]}")
            else:
                supplement['sub_categories']['brands'] = ['Unavailable']
                print(f"No brand found for {name}. Set to 'Unavailable'")
        print(f"Brands fixed in {filename}\n")
        with open(os.path.join(fixtures, filename), 'w') as f:
            json.dump(data, f, indent=4)
----------------------------------------------------------------------------------------

Reset prices for each

fixtures = 'NT_gallery/fixtures'
for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        with open(os.path.join(fixtures, filename), 'r') as file:
            data = json.load(file)
        for supplement in data:
            supplement['price'] = 0.0
        with open(os.path.join(fixtures, filename), 'w') as f:
            json.dump(data, f, indent=4)


fixtures = 'NT_gallery/fixtures'

for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        with open(os.path.join(fixtures, filename), 'r') as file:
            data = json.load(file)
        for supplement in data:
            name = supplement.get('name')
            if name in pharmacy_grouping:
                supplement['sub_categories']['pharmacy grouping'] = [pharmacy_grouping[name]]
                print(f"Supplement: {supplement['name']}--->{supplement['sub_categories']['pharmacy grouping']}")
                print(f"grouping fixed in {filename}\n")
        with open(os.path.join(fixtures, filename), 'w') as f:
            json.dump(data, f, indent=4)


unmatched_supplements = []
for item in data:
    name = item.get('name')
    pharmacy_grouping = item.get('pharmacy grouping')
    if isinstance(pharmacy_grouping, list):
        pharmacy_grouping_str = ', '.join(pharmacy_grouping)
    else:
        pharmacy_grouping_str = pharmacy_grouping
    
    if pharmacy_grouping_str not in pharmacy_grouping_classes:
        unmatched_supplements.append((name, pharmacy_grouping_str))

if unmatched_supplements:
    print("Supplements whose pharmacy grouping does not contain any of the above pharmacy grouping class:")
    for supplement, pharmacy_grouping in unmatched_supplements:
        print(f"{supplement}: {pharmacy_grouping}")


target_supplements = ["Spidex", "STC 30"]
unavailable_brands = []

for filename in os.listdir('NT_gallery/fixtures'):
    if filename.endswith('.json'):
        with open(os.path.join('NT_gallery/fixtures', filename), 'r') as file:
            data = json.load(file)
            for item in data:
                if item['name'].lower() in [target.lower() for target in target_supplements]:
                    print(f"Found target supplement: {item['name']} in file {filename}")
                if "unavailable" in [brand.lower() for brand in item['sub_categories']['brands']]:
                    unavailable_brands.append((item['name'], filename))

for supplement, filename in unavailable_brands:
    print(f"Found supplement with unavailable brand: {supplement} in file {filename}")
--------------------------------------------------------------------------------------------
matched_supplements = {}
unmatched_supplements = set()
def match_supplements(supplements_data, fixtures):
    def reset_supplements_match():
        matched_supplements = {}
        unmatched_supplements = set()
    for supplement in supplements_data:
        unmatched_supplements.add(supplement['name'])
    for filename in os.listdir(fixtures):
        if filename.endswith('.json'):
            with open(os.path.join(fixtures, filename), 'r+') as file:
                data = json.load(file)
                for supplement in supplements_data:
                    # Check if the current supplement matches any item in the current file's data
                    for item in data:
                        if supplement['name'].lower() in item['name'].lower():
                            # If a match is found, add the supplement to the matched_supplements dictionary
                            if supplement['name'] not in matched_supplements:
                                matched_supplements[supplement['name']] = {
                                    'brand': supplement['brand'],
                                    'strength': supplement['strength'],
                                    'dosage_form': supplement['dosage_form'],
                                    'files': [filename]
                                }
                            else:
                                if filename not in matched_supplements[supplement['name']]['files']:
                                    matched_supplements[supplement['name']]['files'].append(filename)
                            unmatched_supplements.discard(supplement['name'])
                            item['sub_categories']['brands'] = supplement['brand']
                            item['strength'] = supplement['strength']
                            item['dosage_form'] = supplement['dosage_form']
                file.seek(0)
                json.dump(data, file, indent=4)

def print_supplement_results():
    print("Matched Supplements:")
    for supplement, values in matched_supplements.items():
        print(f"Name: {supplement}")
        print(f"Brand: {values['brand']}")
        print(f"Strength: {values['strength']}")
        print(f"Dosage Form: {values['dosage_form']}")
        print(f"Files: {', '.join(values['files'])}")
        print("------------------------")
    print("\nUnmatched Supplements:")
    for supplement in unmatched_supplements:
        print(f"Name: {supplement}")
        print(f"Files: No matches found in any file")
        print("------------------------")


def print_potential_ratios(unmatched_supplements, fixtures, ratio_threshold):
    for supplement in unmatched_supplements:
        for filename in os.listdir(fixtures):
            if filename.endswith('.json'):
                with open(os.path.join(fixtures, filename), 'r') as file:
                    data = json.load(file)
                    for item in data:
                        ratio = fuzz.partial_ratio(supplement.lower(), item['name'].lower())
                        if ratio > ratio_threshold:
                            print(f"Supplement: {supplement}")
                            print(f"Potential Match: {item['name']}")
                            print(f"File: {filename}")
                            print(f"Similarity Ratio: {ratio}")
                            print("------------------------")

def detect_json_errors(fixtures):
    for filename in os.listdir(fixtures):
        if filename.endswith('.json'):
            try:
                with open(os.path.join(fixtures, filename), 'r') as file:
                    json.load(file)
            except json.JSONDecodeError as e:
                print(f"Error in file: {filename}")

def rewrite_potential_matches(unmatched_supplements, fixtures, exclude_names):
    print("Unmatched Supplements:")
    for supplement in unmatched_supplements:
        print(f"Name: {supplement}")
    print("\nPotential Matches (Fuzzy):")
    for supplement in unmatched_supplements[:]:  # Iterate over a copy of the list
        for filename in os.listdir(fixtures):
            if filename.endswith('.json'):
                with open(os.path.join(fixtures, filename), 'r+') as file:
                    data = json.load(file)
                    for item in data:
                        ratio = fuzz.partial_ratio(supplement.lower(), item['name'].lower())
                        if ratio > 80:
                            original_name = item['name']
                            if item['name'].lower() in [name.lower() for name in exclude_names]:
                                new_name = item['name']
                            else:
                                new_name = supplement
                            item['name'] = new_name
                            print(f"Supplement: {supplement}")
                            print(f"Potential Match: {original_name} -> {new_name}")
                            print(f"File: {filename}")
                            print(f"Similarity Ratio: {ratio}")
                            print("------------------------")
                            # Remove the matched supplement from the unmatched_supplements list
                            unmatched_supplements.remove(supplement)
                            break  # Break out of the inner loop
                    with open(os.path.join(fixtures, filename), 'w') as file:
                        json.dump(data, file, indent=4)


match_supplements(supplements_data, fixtures)
rewrite_potential_matches(unmatched_supplements, fixtures, exclude_names)
print_potential_ratios(unmatched_supplements, fixtures, 80)
detect_json_errors(fixtures)
print_supplement_results()
print_products('respiratorycondition.json')


exclude_names = ['Vitamin B6','Vitamin C','Vitamin E','Vitamin k','Vitamin A','Calcium','Probiotics','Potassium']


# Loop through each file in the fixtures folder
pic_bucket = []
unique_items = set()
pic_number = 1


# Loop through each file in the fixtures folder
for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        # Open the JSON file
        file_path = os.path.join(fixtures, filename)
        with open(file_path, 'r') as file:
            # Load the JSON data
            data = json.load(file)
            for item in data:
                if 'name' in item and item['name'] not in unique_items:
                    unique_items.add(item['name'])
                    pic_bucket.append((item['name'], pic_number))
                    pic_number += 1

for item in pic_bucket:
    print(f"{item[0]} -- {item[1]}")

print(f"Length of pic_bucket: {len(pic_bucket)}")

list = []
for item in pic_bucket:
    if 'cinnamon' in item[0] or 'acidophilus' in item[0]:
        list.append(item[1])


print(list)

for item in pic_bucket:
    if 'stress' in item[0].lower():
        print(f"{item[1]}")


vitamins_to_check = ['Acetyl-L-Carnitine', 'Vitamin C']

fixtures_folder = 'NT_gallery/fixtures'

for filename in os.listdir(fixtures_folder):
    if filename.endswith(".json"):
        with open(os.path.join(fixtures_folder, filename)) as f:
            data = json.load(f)
            for i, supplement in enumerate(data):
                if supplement['name'] in vitamins_to_check and supplement['name'] not in supplement['description']:
                    print(f"File: {filename}")
                    print(f"Supplement Name: {supplement['name']} (#{i})")
                    print(f"Supplement Brand: {supplement['sub_categories']['brands']}")
                    print(f"Description: {supplement['description']}\n")


fixtures = 'NT_gallery/fixtures'
for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        with open(os.path.join(fixtures, filename), 'r') as file:
            data = json.load(file)
        for supplement in data:
            if 'image' in supplement:
                del supplement['image']
            if 'sub_categories' in supplement and 'Dosage Forms' in supplement['sub_categories']:
                dosage_form = supplement['sub_categories']['Dosage Forms']
                print(supplement['name'])
                if isinstance(dosage_form, list) and dosage_form:
                    if isinstance(dosage_form[0], str):
                        dosage_form_value = dosage_form[0].lower()
                        if dosage_form_value == 'caps':
                            supplement['dosage_form'] = 'capsules'
                        else:
                            supplement['dosage_form'] = dosage_form[0]
                    else:
                        supplement['dosage_form'] = dosage_form[0]
                elif isinstance(dosage_form, str):
                    dosage_form_value = dosage_form.lower()
                    if dosage_form_value == 'caps':
                        supplement['dosage_form'] = 'capsules'
                    else:
                        supplement['dosage_form'] = dosage_form
                else:
                    supplement['dosage_form'] = dosage_form
                del supplement['sub_categories']['Dosage Forms']
        with open(os.path.join(fixtures, filename), 'w') as file:
            json.dump(data, file, indent=4)


for filename in os.listdir(fixtures):
    if filename.endswith('.json'):
        with open(os.path.join(fixtures, filename), 'r') as file:
            data = json.load(file)
        empty_dosage_supplements = [supplement for supplement in data if 'dosage_form' not in supplement or supplement['dosage_form'] == '']
        if empty_dosage_supplements:
            print(f"Filename: {filename}")
            for supplement in empty_dosage_supplements:
                print(supplement['name'])
            print("\n")